<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN" Id="{77239250-c5eb-4cdf-b23e-d4a331d11ff7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR CONSTANT
	MAX_TESTSTRING_SIZE	: DWORD := 2000;
END_VAR
VAR
	// Unit tests
	// Scenario 1: Basic hashing (no key, no derive key)
	dataShort			: ARRAY[0..14] OF BYTE := [72, 101, 108, 108, 111, 44, 32, 66, 76, 65, 75, 69, 51, 33, 0]; // "Hello, BLAKE3!" 
	dataShortResult		: ARRAY [0..Tc3_BLAKE3.ParameterList.BLAKE3_OUT_LEN-1] OF BYTE := [16#F9,16#96,16#63,16#11,16#C7,16#80,16#66,16#5A,16#97,16#B5,16#BE,16#88,16#68,16#2F,16#05,16#F2,16#C9,16#B7,16#25,16#90,16#87,16#C5,16#11,16#39,16#00,16#C2,16#39,16#0B,16#65,16#B0,16#B5,16#FF];
	dataLong			
	// same as dataLong but two pieces 
	dataLong01			
	dataLong02			
	dataLongResult		: ARRAY [0..Tc3_BLAKE3.ParameterList.BLAKE3_OUT_LEN-1] OF BYTE := [16#B7,16#6A,16#E5,16#7A,16#D5,16#62,16#3D,16#87,16#8A,16#58,16#A2,16#BD,16#A0,16#63,16#34,16#DD,16#58,16#DE,16#B2,16#25,16#3F,16#45,16#1E,16#09,16#79,16#D4,16#EC,16#15,16#1D,16#BB,16#01,16#DD];

	// Scenario 2: Keyed hashing
	key					: ARRAY[0..Tc3_BLAKE3.ParameterList.BLAKE3_KEY_LEN-1] OF BYTE;

	// Scenario 3: Derive key
	derive_key_context	: T_MaxString := 'My application context string';
	
	// Unit test results
	unitTestOK			: BOOL;
	unitTestShort		: BOOL;
	unitTestLong		: BOOL;	
	unitTestLong2Pieces	: BOOL;	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Test all types
unitTestOK				:= TRUE;

// The samples in the main are only basic tests
// for official reference vector tests, refer to RefVectorTests

// Scenario 1: Basic hashing (no key, no derive key)
// TEST short data blob
// Initialize, hash and finalize
hasher.init();
hasher.update(ADR(dataShort), len2(ADR(dataShort)));
hasher.finalize(hash);
// test 
unitTestShort 	:= (memcmp(ADR(hash), ADR(dataShortResult), Tc3_BLAKE3.ParameterList.BLAKE3_OUT_LEN)) = 0;
unitTestOK 		:= unitTestOK AND unitTestShort;

// TEST long data blob
// Initialize, hash and finalize
hasher.init();
hasher.update(ADR(dataLong), len2(ADR(dataLong)));
hasher.finalize(hash);
// test 
unitTestLong 	:= (memcmp(ADR(hash), ADR(dataLongResult), Tc3_BLAKE3.ParameterList.BLAKE3_OUT_LEN)) = 0;
unitTestOK 		:= unitTestOK AND unitTestLong;

// TEST long data blob 2 pieces, simulating streaming data
// Initialize, hash and finalize
hasher.init();
hasher.update(ADR(dataLong01), len2(ADR(dataLong01)));
hasher.update(ADR(dataLong02), len2(ADR(dataLong02)));
hasher.finalize(hash);
// test 
unitTestLong2Pieces 	:= (memcmp(ADR(hash), ADR(dataLongResult), Tc3_BLAKE3.ParameterList.BLAKE3_OUT_LEN)) = 0;
unitTestOK 				:= unitTestOK AND unitTestLong2Pieces;

// Scenario 2: Keyed hashing
// see RefVectorTests

// Scenario 3: Derive key
// see RefVectorTests

// All reference vector tests, to be run outside of realtime context because of heavy load
RefVectorTests();




]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>